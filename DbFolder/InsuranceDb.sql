--------------------------------------------------------
--  File created - Pazartesi-Þubat-14-2022   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence CUSTOMER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INSURANCEDB"."CUSTOMER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence CUSTOMER_TRG
--------------------------------------------------------

   CREATE SEQUENCE  "INSURANCEDB"."CUSTOMER_TRG"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_CUSTOMER
--------------------------------------------------------

   CREATE SEQUENCE  "INSURANCEDB"."SEQ_CUSTOMER"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table CUSTOMER
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."CUSTOMER" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" NVARCHAR2(200), 
	"SURNAME" NVARCHAR2(200), 
	"USERNAME" NVARCHAR2(200), 
	"PASSWORD" NVARCHAR2(200), 
	"NATIONALITY" NVARCHAR2(20), 
	"IDENTIFICATIONNUMBER" NVARCHAR2(200), 
	"BIRTHDATE" DATE, 
	"GENDER" NVARCHAR2(200), 
	"EMAIL" NVARCHAR2(200), 
	"PHONE" NVARCHAR2(200), 
	"ADRESS" NVARCHAR2(400), 
	"CREATEDATE" DATE, 
	"UPDATEDATE" DATE, 
	"CREATEBY" NUMBER(*,0), 
	"UPDATEBY" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DISEASE
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."DISEASE" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" NVARCHAR2(200), 
	"RAISE" NUMBER(*,0), 
	"CREATEBY" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER(*,0), 
	"UPDATEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DISEASEOFTHEINSUREDMAPPING
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."DISEASEOFTHEINSUREDMAPPING" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"INSUREDREGISTRATIONID" NUMBER, 
	"DISEASEID" NUMBER, 
	"CREATEBY" NUMBER, 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER, 
	"UPDATEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EMPLOYEE
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."EMPLOYEE" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"EMPLOYEETYPEID" NUMBER(*,0), 
	"EMPLOYEEMANAGERID" NUMBER(*,0), 
	"NAME" NVARCHAR2(200), 
	"SURNAME" NVARCHAR2(200), 
	"USERNAME" NVARCHAR2(200), 
	"PASSWORD" NVARCHAR2(400), 
	"PHONE" NVARCHAR2(100), 
	"ADRESS" NVARCHAR2(400), 
	"EMAIL" NVARCHAR2(400), 
	"TITLE" NVARCHAR2(400), 
	"CREATEBY" NUMBER(*,0), 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER(*,0), 
	"UPDATEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EMPLOYEETYPE
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."EMPLOYEETYPE" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" NVARCHAR2(200), 
	"CREATEBY" NUMBER, 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER, 
	"UPDATEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table INSTALLMENTAMOUNT
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."INSTALLMENTAMOUNT" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"AMOUNT" NUMBER, 
	"RAISE" NUMBER, 
	"CREATEBY" NUMBER, 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER, 
	"UPDATEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table INSUREDREGISTRATION
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."INSUREDREGISTRATION" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CUSTOMERID" NUMBER, 
	"PROXIMITYID" NUMBER, 
	"NAME" NVARCHAR2(200), 
	"SURNAME" NVARCHAR2(200), 
	"NATIONALITY" NVARCHAR2(100), 
	"IDENTIFICATIONNUMBER" NVARCHAR2(100), 
	"BIRTHDATE" DATE, 
	"GENDER" NVARCHAR2(100), 
	"EMAIL" NVARCHAR2(200), 
	"ADRESS" NVARCHAR2(200), 
	"PHONE" NVARCHAR2(100), 
	"CREATEBY" NUMBER, 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER, 
	"UPDATEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PAYMENTTYPE
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."PAYMENTTYPE" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" NVARCHAR2(200), 
	"DESCRIPTION" NVARCHAR2(400), 
	"DISCOUNT" NUMBER, 
	"CREATEBY" NUMBER, 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER, 
	"UPDATEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table POLICY
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."POLICY" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" NVARCHAR2(800), 
	"DESCRIPTION" NVARCHAR2(800), 
	"CREATEBY" NUMBER, 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER, 
	"UPDATEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table POLICYTYPE
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."POLICYTYPE" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"POLICYID" NUMBER, 
	"NAME" NVARCHAR2(800), 
	"DESCRIPTION" NVARCHAR2(800), 
	"CREATEBY" NUMBER, 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER, 
	"UPDATEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table POLICYTYPEDETAILS
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."POLICYTYPEDETAILS" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"POLICYTYPEID" NUMBER, 
	"NAME" NVARCHAR2(800), 
	"DESCRIPTION" NVARCHAR2(800), 
	"PRICE" NUMBER, 
	"CREATEBY" NUMBER, 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER, 
	"UPDATEDATE" DATE, 
	"PRIM" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PROXIMITYDEGREE
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."PROXIMITYDEGREE" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PROXIMITYNAME" NVARCHAR2(200), 
	"CREATEBY" NUMBER, 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER, 
	"UPDATEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PURCHASEORDER
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."PURCHASEORDER" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CUSTOMERID" NUMBER, 
	"PAYMENTTYPEID" NUMBER, 
	"INSTALLMENTAMOUNTID" NUMBER, 
	"TOTALPRICE" NUMBER, 
	"DESCRIPTION" NVARCHAR2(400), 
	"APPROVEREMPLOYEEID" NUMBER, 
	"PURCHASEORDERSTATUSID" NUMBER, 
	"EXPIRATIONDATE" DATE, 
	"CREATEBY" NUMBER, 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER, 
	"UPDATEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PURCHASEORDERDETAILS
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."PURCHASEORDERDETAILS" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PURCHASEORDERID" NUMBER, 
	"INSUREDREGISTRATIONID" NUMBER, 
	"PRICE" NUMBER, 
	"DESCRIPTION" NVARCHAR2(400), 
	"CREATEBY" NUMBER, 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER, 
	"UPDATEDATE" DATE, 
	"POLICYID" NUMBER, 
	"POLICYTYPEID" NUMBER, 
	"POLICYTYPEDETAILSID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PURCHASEORDERSTATUS
--------------------------------------------------------

  CREATE TABLE "INSURANCEDB"."PURCHASEORDERSTATUS" 
   (	"ID" NUMBER(10,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" NVARCHAR2(200), 
	"CREATEBY" NUMBER, 
	"CREATEDATE" DATE, 
	"UPDATEBY" NUMBER, 
	"UPDATEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
REM INSERTING into INSURANCEDB.CUSTOMER
SET DEFINE OFF;
Insert into INSURANCEDB.CUSTOMER (ID,NAME,SURNAME,USERNAME,PASSWORD,NATIONALITY,IDENTIFICATIONNUMBER,BIRTHDATE,GENDER,EMAIL,PHONE,ADRESS,CREATEDATE,UPDATEDATE,CREATEBY,UPDATEBY) values ('503','test','test',null,null,'Türkiye','123',to_date('01/01/2003','DD/MM/RRRR'),'Erkek','test','123','¿stanbul',null,null,'0','0');
Insert into INSURANCEDB.CUSTOMER (ID,NAME,SURNAME,USERNAME,PASSWORD,NATIONALITY,IDENTIFICATIONNUMBER,BIRTHDATE,GENDER,EMAIL,PHONE,ADRESS,CREATEDATE,UPDATEDATE,CREATEBY,UPDATEBY) values ('504',null,null,null,null,'Türkiye',null,to_date('01/01/2003','DD/MM/RRRR'),'Erkek',null,null,'¿stanbul',null,null,'0','0');
Insert into INSURANCEDB.CUSTOMER (ID,NAME,SURNAME,USERNAME,PASSWORD,NATIONALITY,IDENTIFICATIONNUMBER,BIRTHDATE,GENDER,EMAIL,PHONE,ADRESS,CREATEDATE,UPDATEDATE,CREATEBY,UPDATEBY) values ('505',null,null,null,null,'Türkiye',null,to_date('01/01/2003','DD/MM/RRRR'),'Erkek',null,null,'¿stanbul',null,null,'0','0');
Insert into INSURANCEDB.CUSTOMER (ID,NAME,SURNAME,USERNAME,PASSWORD,NATIONALITY,IDENTIFICATIONNUMBER,BIRTHDATE,GENDER,EMAIL,PHONE,ADRESS,CREATEDATE,UPDATEDATE,CREATEBY,UPDATEBY) values ('506','test','test',null,null,'Türkiye','test',to_date('01/01/2003','DD/MM/RRRR'),'Erkek','test','test','¿stanbul',null,null,'0','0');
Insert into INSURANCEDB.CUSTOMER (ID,NAME,SURNAME,USERNAME,PASSWORD,NATIONALITY,IDENTIFICATIONNUMBER,BIRTHDATE,GENDER,EMAIL,PHONE,ADRESS,CREATEDATE,UPDATEDATE,CREATEBY,UPDATEBY) values ('502','test','test','test','test','test','123',to_date('14/02/2022','DD/MM/RRRR'),'123','test','test','test',to_date('14/02/2022','DD/MM/RRRR'),null,'0','0');
REM INSERTING into INSURANCEDB.DISEASE
SET DEFINE OFF;
Insert into INSURANCEDB.DISEASE (ID,NAME,RAISE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('22','test',null,null,null,null,null);
Insert into INSURANCEDB.DISEASE (ID,NAME,RAISE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('23','test',null,null,null,null,null);
REM INSERTING into INSURANCEDB.DISEASEOFTHEINSUREDMAPPING
SET DEFINE OFF;
REM INSERTING into INSURANCEDB.EMPLOYEE
SET DEFINE OFF;
Insert into INSURANCEDB.EMPLOYEE (ID,EMPLOYEETYPEID,EMPLOYEEMANAGERID,NAME,SURNAME,USERNAME,PASSWORD,PHONE,ADRESS,EMAIL,TITLE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('41','27','21','SuperUser','user','user','user','123','test','test','SuperUser','21',to_date('11/02/2022','DD/MM/RRRR'),'0',null);
REM INSERTING into INSURANCEDB.EMPLOYEETYPE
SET DEFINE OFF;
Insert into INSURANCEDB.EMPLOYEETYPE (ID,NAME,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('21','Admin','1',to_date('11/02/2022','DD/MM/RRRR'),null,null);
Insert into INSURANCEDB.EMPLOYEETYPE (ID,NAME,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('27','SuperUser','21',to_date('11/02/2022','DD/MM/RRRR'),null,null);
REM INSERTING into INSURANCEDB.INSTALLMENTAMOUNT
SET DEFINE OFF;
Insert into INSURANCEDB.INSTALLMENTAMOUNT (ID,AMOUNT,RAISE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('1','3','3','0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
Insert into INSURANCEDB.INSTALLMENTAMOUNT (ID,AMOUNT,RAISE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('2','6','6','0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
REM INSERTING into INSURANCEDB.INSUREDREGISTRATION
SET DEFINE OFF;
Insert into INSURANCEDB.INSUREDREGISTRATION (ID,CUSTOMERID,PROXIMITYID,NAME,SURNAME,NATIONALITY,IDENTIFICATIONNUMBER,BIRTHDATE,GENDER,EMAIL,ADRESS,PHONE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('122','505','1',null,null,'Türkiye',null,to_date('01/01/2003','DD/MM/RRRR'),'Erkek',null,null,null,'0',null,'0',null);
Insert into INSURANCEDB.INSUREDREGISTRATION (ID,CUSTOMERID,PROXIMITYID,NAME,SURNAME,NATIONALITY,IDENTIFICATIONNUMBER,BIRTHDATE,GENDER,EMAIL,ADRESS,PHONE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('123','506','1','test','test','Türkiye','test',to_date('01/01/2003','DD/MM/RRRR'),'Erkek','test','test','test','0',null,'0',null);
Insert into INSURANCEDB.INSUREDREGISTRATION (ID,CUSTOMERID,PROXIMITYID,NAME,SURNAME,NATIONALITY,IDENTIFICATIONNUMBER,BIRTHDATE,GENDER,EMAIL,ADRESS,PHONE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('120','503','1','test','test','Türkiye','123',to_date('01/01/2003','DD/MM/RRRR'),'Erkek','test','123','123421','0',null,'0',null);
Insert into INSURANCEDB.INSUREDREGISTRATION (ID,CUSTOMERID,PROXIMITYID,NAME,SURNAME,NATIONALITY,IDENTIFICATIONNUMBER,BIRTHDATE,GENDER,EMAIL,ADRESS,PHONE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('121','504','1',null,null,'Türkiye',null,to_date('01/01/2003','DD/MM/RRRR'),'Erkek',null,null,null,'0',null,'0',null);
Insert into INSURANCEDB.INSUREDREGISTRATION (ID,CUSTOMERID,PROXIMITYID,NAME,SURNAME,NATIONALITY,IDENTIFICATIONNUMBER,BIRTHDATE,GENDER,EMAIL,ADRESS,PHONE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('119','501','1','test','test','test','123',to_date('14/02/2022','DD/MM/RRRR'),'erkek','test','test','test','0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
REM INSERTING into INSURANCEDB.PAYMENTTYPE
SET DEFINE OFF;
Insert into INSURANCEDB.PAYMENTTYPE (ID,NAME,DESCRIPTION,DISCOUNT,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('2','Taksit',null,'-5','0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
Insert into INSURANCEDB.PAYMENTTYPE (ID,NAME,DESCRIPTION,DISCOUNT,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('1','Peþin',null,'5','0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
REM INSERTING into INSURANCEDB.POLICY
SET DEFINE OFF;
Insert into INSURANCEDB.POLICY (ID,NAME,DESCRIPTION,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('1','Saðlýk',null,'0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
Insert into INSURANCEDB.POLICY (ID,NAME,DESCRIPTION,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('3','SencardDental',null,'0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
Insert into INSURANCEDB.POLICY (ID,NAME,DESCRIPTION,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('2','Seyahat',null,'0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
REM INSERTING into INSURANCEDB.POLICYTYPE
SET DEFINE OFF;
Insert into INSURANCEDB.POLICYTYPE (ID,POLICYID,NAME,DESCRIPTION,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('1','1','Kiþiye Özel',null,'0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
REM INSERTING into INSURANCEDB.POLICYTYPEDETAILS
SET DEFINE OFF;
Insert into INSURANCEDB.POLICYTYPEDETAILS (ID,POLICYTYPEID,NAME,DESCRIPTION,PRICE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE,PRIM) values ('2','1','Ayakta Tedavi Teminatý',null,'500','0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'),'20');
Insert into INSURANCEDB.POLICYTYPEDETAILS (ID,POLICYTYPEID,NAME,DESCRIPTION,PRICE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE,PRIM) values ('1','1','Yatarak Tedavi Teminatý',null,'1000','0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'),'70');
Insert into INSURANCEDB.POLICYTYPEDETAILS (ID,POLICYTYPEID,NAME,DESCRIPTION,PRICE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE,PRIM) values ('3','1','Yatarak ve Ayakta Tedavi Teminatý',null,'1300','0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'),'0');
REM INSERTING into INSURANCEDB.PROXIMITYDEGREE
SET DEFINE OFF;
Insert into INSURANCEDB.PROXIMITYDEGREE (ID,PROXIMITYNAME,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('1','Eþ','0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
Insert into INSURANCEDB.PROXIMITYDEGREE (ID,PROXIMITYNAME,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('2','Çocuk','0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
REM INSERTING into INSURANCEDB.PURCHASEORDER
SET DEFINE OFF;
Insert into INSURANCEDB.PURCHASEORDER (ID,CUSTOMERID,PAYMENTTYPEID,INSTALLMENTAMOUNTID,TOTALPRICE,DESCRIPTION,APPROVEREMPLOYEEID,PURCHASEORDERSTATUSID,EXPIRATIONDATE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('62','505','2','0','0',null,'0','2',null,'0',null,'0',null);
Insert into INSURANCEDB.PURCHASEORDER (ID,CUSTOMERID,PAYMENTTYPEID,INSTALLMENTAMOUNTID,TOTALPRICE,DESCRIPTION,APPROVEREMPLOYEEID,PURCHASEORDERSTATUSID,EXPIRATIONDATE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('63','506','1','0','0',null,'0','2',null,'0',null,'0',null);
Insert into INSURANCEDB.PURCHASEORDER (ID,CUSTOMERID,PAYMENTTYPEID,INSTALLMENTAMOUNTID,TOTALPRICE,DESCRIPTION,APPROVEREMPLOYEEID,PURCHASEORDERSTATUSID,EXPIRATIONDATE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('61','501','1','0','500','test','41','1',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
REM INSERTING into INSURANCEDB.PURCHASEORDERDETAILS
SET DEFINE OFF;
REM INSERTING into INSURANCEDB.PURCHASEORDERSTATUS
SET DEFINE OFF;
Insert into INSURANCEDB.PURCHASEORDERSTATUS (ID,NAME,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('1','Onaylandý','0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
Insert into INSURANCEDB.PURCHASEORDERSTATUS (ID,NAME,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) values ('2','Onay Bekliyor','0',to_date('14/02/2022','DD/MM/RRRR'),'0',to_date('14/02/2022','DD/MM/RRRR'));
--------------------------------------------------------
--  DDL for Index PROXIMITYDEGREE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."PROXIMITYDEGREE_PK" ON "INSURANCEDB"."PROXIMITYDEGREE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index POLICY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."POLICY_PK" ON "INSURANCEDB"."POLICY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index EMPLOYEE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."EMPLOYEE_PK" ON "INSURANCEDB"."EMPLOYEE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index EMPLOYEETYPE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."EMPLOYEETYPE_PK" ON "INSURANCEDB"."EMPLOYEETYPE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PURCHASEORDER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."PURCHASEORDER_PK" ON "INSURANCEDB"."PURCHASEORDER" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index DISAESES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."DISAESES_PK" ON "INSURANCEDB"."DISEASE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index DISEASESOFTHEINSUREDMAPPING_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."DISEASESOFTHEINSUREDMAPPING_PK" ON "INSURANCEDB"."DISEASEOFTHEINSUREDMAPPING" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index POLICYTYPE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."POLICYTYPE_PK" ON "INSURANCEDB"."POLICYTYPE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index POLICYTYPEDETAILS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."POLICYTYPEDETAILS_PK" ON "INSURANCEDB"."POLICYTYPEDETAILS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PURCHASEORDERSTATUS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."PURCHASEORDERSTATUS_PK" ON "INSURANCEDB"."PURCHASEORDERSTATUS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PAYMENTTYPE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."PAYMENTTYPE_PK" ON "INSURANCEDB"."PAYMENTTYPE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CUSTOMER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."CUSTOMER_PK" ON "INSURANCEDB"."CUSTOMER" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index INSUREDREGISTRATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."INSUREDREGISTRATION_PK" ON "INSURANCEDB"."INSUREDREGISTRATION" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index INSTALMENTAMOUNT _PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."INSTALMENTAMOUNT _PK" ON "INSURANCEDB"."INSTALLMENTAMOUNT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PURCHASEORDERDETAIL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INSURANCEDB"."PURCHASEORDERDETAIL_PK" ON "INSURANCEDB"."PURCHASEORDERDETAILS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_CUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_CUSTOMER" 
(
    P_NAME                 IN CUSTOMER.NAME%TYPE,
    P_SURNAME              IN CUSTOMER.SURNAME%TYPE,
    P_USERNAME             IN CUSTOMER.USERNAME%TYPE,
    P_PASSWORD             IN CUSTOMER.PASSWORD%TYPE,
    P_NATIONALITY          IN CUSTOMER.NATIONALITY%TYPE,
    P_IDENTIFICATIONNUMBER IN CUSTOMER.IDENTIFICATIONNUMBER%TYPE,
    P_BIRTHDATE            IN CUSTOMER.BIRTHDATE%TYPE,
    P_GENDER               IN CUSTOMER.GENDER%TYPE,
    P_EMAIL                IN CUSTOMER.EMAIL%TYPE,
    P_PHONE                IN CUSTOMER.PHONE%TYPE,
    P_ADRESS               IN CUSTOMER.ADRESS%TYPE,
    P_CREATEDATE           IN CUSTOMER.CREATEDATE%TYPE,
    P_UPDATEDATE           IN CUSTOMER.UPDATEDATE%TYPE,
    P_CREATEBY             IN CUSTOMER.CREATEBY%TYPE,
    P_UPDATEBY             IN CUSTOMER.UPDATEBY%TYPE

) AS
BEGIN
    INSERT INTO CUSTOMER (NAME,SURNAME,USERNAME,PASSWORD,NATIONALITY,IDENTIFICATIONNUMBER,BIRTHDATE,GENDER,EMAIL,PHONE,ADRESS,CREATEDATE,UPDATEDATE,CREATEBY,UPDATEBY)
    VALUES (P_NAME,P_SURNAME,P_USERNAME,P_PASSWORD,P_NATIONALITY,P_IDENTIFICATIONNUMBER,P_BIRTHDATE,P_GENDER,P_EMAIL,P_PHONE,P_ADRESS,P_CREATEDATE,P_UPDATEDATE,P_CREATEBY,P_UPDATEBY);
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_DISEASE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_DISEASE" 
(
   P_NAME IN DISEASE.NAME%TYPE,
   P_RAISE IN DISEASE.RAISE%TYPE,
   P_CREATEBY IN DISEASE.CREATEBY%TYPE,
   P_CREATEDATE IN DISEASE.CREATEDATE%TYPE,
   P_UPDATEBY IN DISEASE.UPDATEBY%TYPE,
   P_UPDATEDATE IN DISEASE.UPDATEDATE%TYPE
)
AS 
BEGIN
  INSERT INTO DISEASE(NAME,RAISE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE)
  VALUES(P_NAME,P_RAISE,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE);
  COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_DISEASEOFTHEINSUREDMAPPING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_DISEASEOFTHEINSUREDMAPPING" 
(
P_INSUREDREGISTRATIONID IN DISEASEOFTHEINSUREDMAPPING.INSUREDREGISTRATIONID%TYPE,
P_DISEASEID IN DISEASEOFTHEINSUREDMAPPING.DISEASEID%TYPE,
P_CREATEBY IN DISEASEOFTHEINSUREDMAPPING.CREATEBY%TYPE,
P_CREATEDATE IN DISEASEOFTHEINSUREDMAPPING.CREATEDATE%TYPE,
P_UPDATEBY IN DISEASEOFTHEINSUREDMAPPING.UPDATEBY%TYPE,
P_UPDATEDATE IN DISEASEOFTHEINSUREDMAPPING.UPDATEDATE%TYPE
)
AS 
BEGIN
  INSERT INTO DISEASEOFTHEINSUREDMAPPING (INSUREDREGISTRATIONID,DISEASEID,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE) VALUES (P_INSUREDREGISTRATIONID,P_DISEASEID,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE);
  COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_EMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_EMPLOYEE" 
(
P_EMPLOYEETYPEID IN EMPLOYEE.EMPLOYEETYPEID%TYPE,
P_EMPLOYEEMANAGERID IN EMPLOYEE.EMPLOYEEMANAGERID%TYPE,
P_NAME IN EMPLOYEE.NAME%TYPE,
P_SURNAME IN EMPLOYEE.SURNAME%TYPE,
P_USERNAME IN EMPLOYEE.USERNAME%TYPE,
P_PASSWORD IN EMPLOYEE.PASSWORD%TYPE,
P_PHONE IN EMPLOYEE.PHONE%TYPE,
P_ADRESS IN EMPLOYEE.ADRESS%TYPE,
P_EMAIL IN EMPLOYEE.EMAIL%TYPE,
P_TITLE IN EMPLOYEE.TITLE%TYPE,
P_CREATEBY IN EMPLOYEE.CREATEBY%TYPE,
P_CREATEDATE IN EMPLOYEE.CREATEDATE%TYPE,
P_UPDATEBY IN EMPLOYEE.UPDATEBY%TYPE,
P_UPDATEDATE IN EMPLOYEE.UPDATEDATE%TYPE
)
AS 
BEGIN
 INSERT INTO EMPLOYEE (EMPLOYEETYPEID,EMPLOYEEMANAGERID,NAME,SURNAME,USERNAME,PASSWORD,PHONE,ADRESS,EMAIL,TITLE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE)
 VALUES (P_EMPLOYEETYPEID,P_EMPLOYEEMANAGERID,P_NAME,P_SURNAME,P_USERNAME,P_PASSWORD,P_PHONE,P_ADRESS,P_EMAIL,P_TITLE,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE);
 COMMIT;
END SP_CREATE_EMPLOYEE;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_EMPLOYEETYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_EMPLOYEETYPE" 
(
P_NAME IN EMPLOYEETYPE.NAME%TYPE,
P_CREATEBY IN EMPLOYEETYPE.CREATEBY%TYPE,
P_CREATEDATE IN EMPLOYEETYPE.CREATEDATE%TYPE,
P_UPDATEBY IN EMPLOYEETYPE.UPDATEBY%TYPE,
P_UPDATEDATE IN EMPLOYEETYPE.UPDATEDATE%TYPE
)
AS 
BEGIN
  INSERT INTO EMPLOYEETYPE (NAME,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE)
  VALUES (P_NAME,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE);
  COMMIT;
END SP_CREATE_EMPLOYEETYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_INSTALLMENTAMOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_INSTALLMENTAMOUNT" 
(
P_AMOUNT IN INSTALLMENTAMOUNT.AMOUNT%TYPE,
P_RAISE IN INSTALLMENTAMOUNT.RAISE%TYPE,
P_CREATEBY IN INSTALLMENTAMOUNT.CREATEBY%TYPE,
P_CREATEDATE IN INSTALLMENTAMOUNT.CREATEDATE%TYPE,
P_UPDATEBY IN INSTALLMENTAMOUNT.UPDATEBY%TYPE,
P_UPDATEDATE IN INSTALLMENTAMOUNT.UPDATEDATE%TYPE
)
AS 
BEGIN
  INSERT INTO INSTALLMENTAMOUNT(AMOUNT,RAISE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE)
  VALUES(P_AMOUNT,P_RAISE,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE);
  COMMIT;
END SP_CREATE_INSTALLMENTAMOUNT;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_INSUREDREGISTRATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_INSUREDREGISTRATION" 
(
P_CUSTOMERID IN INSUREDREGISTRATION.CUSTOMERID%TYPE,
P_PROXIMITYID IN INSUREDREGISTRATION.PROXIMITYID%TYPE,
P_NAME IN INSUREDREGISTRATION.NAME%TYPE,
P_SURNAME IN INSUREDREGISTRATION.SURNAME%TYPE,
P_NATIONALITY IN INSUREDREGISTRATION.NATIONALITY%TYPE,
P_IDENTIFICATIONNUMBER IN INSUREDREGISTRATION.IDENTIFICATIONNUMBER%TYPE,
P_BIRTHDATE IN INSUREDREGISTRATION.BIRTHDATE%TYPE,
P_GENDER IN INSUREDREGISTRATION.GENDER%TYPE,
P_EMAIL IN INSUREDREGISTRATION.EMAIL%TYPE,
P_ADRESS IN INSUREDREGISTRATION.ADRESS%TYPE,
P_PHONE IN INSUREDREGISTRATION.PHONE%TYPE,
P_CREATEBY IN INSUREDREGISTRATION.CREATEBY%TYPE,
P_CREATEDATE IN INSUREDREGISTRATION.CREATEDATE%TYPE,
P_UPDATEBY IN INSUREDREGISTRATION.UPDATEBY%TYPE,
P_UPDATEDATE IN INSUREDREGISTRATION.UPDATEDATE%TYPE
)
AS 
BEGIN
  INSERT INTO INSUREDREGISTRATION(CUSTOMERID,PROXIMITYID,NAME,SURNAME,NATIONALITY,IDENTIFICATIONNUMBER,BIRTHDATE,GENDER,EMAIL,ADRESS,PHONE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE)
  VALUES(P_CUSTOMERID,P_PROXIMITYID,P_NAME,P_SURNAME,P_NATIONALITY,P_IDENTIFICATIONNUMBER,P_BIRTHDATE,P_GENDER,P_EMAIL,P_ADRESS,P_PHONE,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE);
  COMMIT;
END SP_CREATE_INSUREDREGISTRATION;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_PAYMENTTYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_PAYMENTTYPE" 
(
P_NAME IN PAYMENTTYPE.NAME%TYPE,
P_DESCRIPTION IN PAYMENTTYPE.DESCRIPTION%TYPE,
P_DISCOUNT IN PAYMENTTYPE.DISCOUNT%TYPE,
P_CREATEBY IN PAYMENTTYPE.CREATEBY%TYPE,
P_CREATEDATE IN PAYMENTTYPE.CREATEDATE%TYPE,
P_UPDATEBY IN PAYMENTTYPE.UPDATEBY%TYPE,
P_UPDATEDATE IN PAYMENTTYPE.UPDATEDATE%TYPE
)
AS 
BEGIN
INSERT INTO PAYMENTTYPE (NAME,DESCRIPTION,DISCOUNT,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE)
VALUES(P_NAME,P_DESCRIPTION,P_DISCOUNT,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE);
COMMIT;
END SP_CREATE_PAYMENTTYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_POLICY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_POLICY" 
(
P_NAME IN POLICY.NAME%TYPE,
P_DESCRIPTION IN POLICY.DESCRIPTION%TYPE,
P_CREATEBY IN POLICY.CREATEBY%TYPE,
P_CREATEDATE IN POLICY.CREATEDATE%TYPE, 
P_UPDATEBY IN POLICY.UPDATEBY%TYPE,
P_UPDATEDATE IN POLICY.UPDATEDATE%TYPE
)
AS 
BEGIN
 INSERT INTO POLICY(NAME,DESCRIPTION,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE)
 VALUES(P_NAME,P_DESCRIPTION,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE);
 COMMIT;
END SP_CREATE_POLICY;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_POLICYTYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_POLICYTYPE" 
(
P_POLICYID IN POLICYTYPE.POLICYID%TYPE,
P_NAME IN POLICYTYPE.NAME%TYPE,
P_DESCRIPTION IN POLICYTYPE.DESCRIPTION%TYPE,
P_CREATEBY IN POLICYTYPE.CREATEBY%TYPE,
P_CREATEDATE IN POLICYTYPE.CREATEDATE%TYPE,
P_UPDATEBY IN POLICYTYPE.UPDATEBY%TYPE,
P_UPDATEDATE IN POLICYTYPE.UPDATEDATE%TYPE
)
AS 
BEGIN
  INSERT INTO POLICYTYPE(POLICYID,NAME,DESCRIPTION,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE)
  VALUES(P_POLICYID,P_NAME,P_DESCRIPTION,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE);
  COMMIT;
END SP_CREATE_POLICYTYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_POLICYTYPEDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_POLICYTYPEDETAILS" 
(
P_POLICYTYPEID IN POLICYTYPEDETAILS.POLICYTYPEID%TYPE,
P_NAME IN POLICYTYPEDETAILS.NAME%TYPE,
P_DESCRIPTION IN POLICYTYPEDETAILS.DESCRIPTION%TYPE,
P_PRICE IN POLICYTYPEDETAILS.PRICE%TYPE,
P_CREATEBY IN POLICYTYPEDETAILS.CREATEBY%TYPE,
P_CREATEDATE IN POLICYTYPEDETAILS.CREATEDATE%TYPE,
P_UPDATEBY IN POLICYTYPEDETAILS.UPDATEBY%TYPE,
P_UPDATEDATE IN POLICYTYPEDETAILS.UPDATEDATE%TYPE,
P_PRIM IN POLICYTYPEDETAILS.PRIM%TYPE
)
AS 
BEGIN
 INSERT INTO POLICYTYPEDETAILS(POLICYTYPEID,NAME,DESCRIPTION,PRICE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE,PRIM)
 VALUES(P_POLICYTYPEID,P_NAME,P_DESCRIPTION,P_PRICE,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE,P_PRIM);
 COMMIT;
END SP_CREATE_POLICYTYPEDETAILS;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_PROXIMITYDEGREE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_PROXIMITYDEGREE" 
(
P_PROXIMITYNAME IN PROXIMITYDEGREE.PROXIMITYNAME%TYPE,
P_CREATEBY IN PROXIMITYDEGREE.CREATEBY%TYPE,
P_CREATEDATE IN PROXIMITYDEGREE.CREATEDATE%TYPE,
P_UPDATEBY IN PROXIMITYDEGREE.UPDATEBY%TYPE,
P_UPDATEDATE IN PROXIMITYDEGREE.UPDATEDATE%TYPE
)
AS 
BEGIN
  INSERT INTO PROXIMITYDEGREE(PROXIMITYNAME,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE)
  VALUES (P_PROXIMITYNAME,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE);
  COMMIT;
END SP_CREATE_PROXIMITYDEGREE;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_PURCHASEORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_PURCHASEORDER" 
(
P_CUSTOMERID IN PURCHASEORDER.CUSTOMERID%TYPE,
P_PAYMENTTYPEID IN PURCHASEORDER.PAYMENTTYPEID%TYPE,
P_INSTALLMENTAMOUNTID IN PURCHASEORDER.INSTALLMENTAMOUNTID%TYPE,
P_TOTALPRICE IN PURCHASEORDER.TOTALPRICE%TYPE,
P_DESCRIPTION IN PURCHASEORDER.DESCRIPTION%TYPE,
P_APPROVEREMPLOYEEID IN PURCHASEORDER.APPROVEREMPLOYEEID%TYPE,
P_PURCHASEORDERSTATUSID IN PURCHASEORDER.PURCHASEORDERSTATUSID%TYPE,
P_EXPIRATIONDATE IN PURCHASEORDER.EXPIRATIONDATE%TYPE,
P_CREATEBY IN PURCHASEORDER.CREATEBY%TYPE,
P_CREATEDATE IN PURCHASEORDER.CREATEDATE%TYPE,
P_UPDATEBY IN PURCHASEORDER.UPDATEBY%TYPE,
P_UPDATEDATE IN PURCHASEORDER.UPDATEDATE%TYPE
)
AS 
BEGIN
  INSERT INTO PURCHASEORDER (CUSTOMERID,PAYMENTTYPEID,INSTALLMENTAMOUNTID,TOTALPRICE,DESCRIPTION,APPROVEREMPLOYEEID,PURCHASEORDERSTATUSID,EXPIRATIONDATE,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE)
  VALUES (P_CUSTOMERID,P_PAYMENTTYPEID,P_INSTALLMENTAMOUNTID,P_TOTALPRICE,P_DESCRIPTION,P_APPROVEREMPLOYEEID,P_PURCHASEORDERSTATUSID,P_EXPIRATIONDATE,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE);
  COMMIT;
END SP_CREATE_PURCHASEORDER;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_PURCHASEORDERDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_PURCHASEORDERDETAILS" 
(
P_PURCHASEORDERID IN PURCHASEORDERDETAILS.PURCHASEORDERID%TYPE,
P_INSUREDREGISTRATIONID IN PURCHASEORDERDETAILS.INSUREDREGISTRATIONID%TYPE,
P_PRICE IN PURCHASEORDERDETAILS.PRICE%TYPE,
P_DESCRIPTION IN PURCHASEORDERDETAILS.DESCRIPTION%TYPE,
P_CREATEBY IN PURCHASEORDERDETAILS.CREATEBY%TYPE,
P_CREATEDATE IN PURCHASEORDERDETAILS.CREATEDATE%TYPE,
P_UPDATEBY IN PURCHASEORDERDETAILS.UPDATEBY%TYPE,
P_UPDATEDATE IN PURCHASEORDERDETAILS.UPDATEDATE%TYPE,
P_POLICYID IN PURCHASEORDERDETAILS.POLICYID%TYPE,
P_POLICYTYPEID IN PURCHASEORDERDETAILS.POLICYTYPEID%TYPE,
P_POLICYTYPEDETAILSID IN PURCHASEORDERDETAILS.POLICYTYPEDETAILSID%TYPE
)
AS 
BEGIN
  INSERT INTO PURCHASEORDERDETAILS(PURCHASEORDERID,INSUREDREGISTRATIONID,PRICE,DESCRIPTION,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE,POLICYID,POLICYTYPEID,POLICYTYPEDETAILSID)
  VALUES (P_PURCHASEORDERID,P_INSUREDREGISTRATIONID,P_PRICE,P_DESCRIPTION,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE,P_POLICYID,P_POLICYTYPEID,P_POLICYTYPEDETAILSID);
  COMMIT;
END SP_CREATE_PURCHASEORDERDETAILS;

/
--------------------------------------------------------
--  DDL for Procedure SP_CREATE_PURCHASEORDERSTATUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CREATE_PURCHASEORDERSTATUS" 
(
P_NAME IN PURCHASEORDERSTATUS.NAME%TYPE,
P_CREATEBY IN PURCHASEORDERSTATUS.NAME%TYPE,
P_CREATEDATE IN PURCHASEORDERSTATUS.NAME%TYPE,
P_UPDATEBY IN PURCHASEORDERSTATUS.NAME%TYPE,
P_UPDATEDATE IN PURCHASEORDERSTATUS.NAME%TYPE
)
AS 
BEGIN
 INSERT INTO PURCHASEORDERSTATUS (NAME,CREATEBY,CREATEDATE,UPDATEBY,UPDATEDATE)
 VALUES (P_NAME,P_CREATEBY,P_CREATEDATE,P_UPDATEBY,P_UPDATEDATE);
 COMMIT;
END SP_CREATE_PURCHASEORDERSTATUS;

/
--------------------------------------------------------
--  DDL for Procedure SP_CUSTOM_FORVIEW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_CUSTOM_FORVIEW" 
(
 RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR
SELECT c.name as CustomerName,c.surname as Surname,ireg.name as InsuredName,ptd.Name as PolicyName,ptd.PRICE as PRICE,ptd.PRIM as PRIM,pt.name AS PaymentTypeName,imt.AMOUNT as AmountCount,o.totalprice as TotalPrice,e.name as ApproverEmployeeName,pos.name as PurchaseOrderStatusName  FROM PURCHASEORDER o
FULL join PAYMENTTYPE pt on (o.paymenttypeid = pt.id)
FULL join CUSTOMER c on (o.customerid = c.id)
FULL join EMPLOYEE e on (o.approveremployeeid = e.id)
FULL join PURCHASEORDERSTATUS pos on (o.PURCHASEORDERSTATUSID = pos.ID)
FULL join PURCHASEORDERDETAILS pd ON (o.id = pd.purchaseorderid)
FULL join INSUREDREGISTRATION ireg on (pd.INSUREDREGISTRATIONID = ireg.id)
FULL join POLICYTYPEDETAILS ptd on (pd.POLICYTYPEDETAILSID = ptd.ID)
FULL join INSTALLMENTAMOUNT imt on (o.INSTALLMENTAMOUNTID = imt.id);
END SP_CUSTOM_FORVIEW;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_CUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_CUSTOMER" 
(
P_ID IN CUSTOMER.ID%TYPE
)
AS 
BEGIN
  DELETE FROM CUSTOMER WHERE ID = P_ID;
  COMMIT;
END SP_DELETE_CUSTOMER;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_DISEASE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_DISEASE" 
(
P_ID IN DISEASE.ID%TYPE
)
AS 
BEGIN
  DELETE FROM DISEASE WHERE ID = P_ID;
  COMMIT;
END SP_DELETE_DISEASE;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_DISEASEOFTHEINSUREDMAPPING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_DISEASEOFTHEINSUREDMAPPING" 
(
P_ID IN DISEASEOFTHEINSUREDMAPPING.ID%TYPE
)
AS 
BEGIN
  DELETE FROM DISEASEOFTHEINSUREDMAPPING WHERE ID = P_ID;
  COMMIT;
END SP_DELETE_DISEASEOFTHEINSUREDMAPPING;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_EMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_EMPLOYEE" 
(
P_ID IN EMPLOYEE.ID%TYPE
)
AS 
BEGIN
  DELETE FROM EMPLOYEE WHERE ID = P_ID;
  COMMIT;
END SP_DELETE_EMPLOYEE;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_EMPLOYEETYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_EMPLOYEETYPE" 
(
P_ID IN EMPLOYEETYPE.ID%TYPE
)
AS 
BEGIN
  DELETE FROM EMPLOYEETYPE WHERE ID = P_ID;
  COMMIT;
END SP_DELETE_EMPLOYEETYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_INSTALLMENTAMOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_INSTALLMENTAMOUNT" 
(
P_ID IN INSTALLMENTAMOUNT.ID%TYPE
)
AS 
BEGIN
  DELETE FROM INSTALLMENTAMOUNT WHERE ID = P_ID;
  COMMIT;
END SP_DELETE_INSTALLMENTAMOUNT;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_INSUREDREGISTRATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_INSUREDREGISTRATION" 
(
P_ID IN INSUREDREGISTRATION .ID%TYPE
)
AS 
BEGIN
  DELETE FROM INSUREDREGISTRATION  WHERE ID = P_ID;
  COMMIT;
END SP_DELETE_INSUREDREGISTRATION;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_PAYMENTTYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_PAYMENTTYPE" 
(
P_ID IN PAYMENTTYPE.ID%TYPE
)
AS 
BEGIN
DELETE FROM PAYMENTTYPE WHERE ID = P_ID;
COMMIT;
END SP_DELETE_PAYMENTTYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_POLICY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_POLICY" 
(
P_ID IN EMPLOYEE.ID%TYPE
)
AS 
BEGIN
  DELETE FROM POLICY WHERE ID = P_ID;
END SP_DELETE_POLICY;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_POLICYTYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_POLICYTYPE" 
(
P_ID IN POLICYTYPE.ID%TYPE
)
AS 
BEGIN
  DELETE FROM POLICYTYPE WHERE ID = P_ID;
  COMMIT;
END SP_DELETE_POLICYTYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_POLICYTYPEDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_POLICYTYPEDETAILS" 
(
P_ID IN POLICYTYPEDETAILS.ID%TYPE
)
AS 
BEGIN
  DELETE FROM POLICYTYPEDETAILS WHERE ID = P_ID;
  COMMIT;
END SP_DELETE_POLICYTYPEDETAILS;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_PROXIMITYDEGREE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_PROXIMITYDEGREE" 
(
P_ID IN PROXIMITYDEGREE.ID%TYPE
)
AS 
BEGIN
  DELETE FROM PROXIMITYDEGREE WHERE ID = P_ID;
  COMMIT;
END SP_DELETE_PROXIMITYDEGREE;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_PURCHASEORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_PURCHASEORDER" 
(
P_ID IN PURCHASEORDER .ID%TYPE
)
AS 
BEGIN
  DELETE FROM PURCHASEORDER  WHERE ID = P_ID;
  COMMIT;
END SP_DELETE_PURCHASEORDER;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_PURCHASEORDERDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_PURCHASEORDERDETAILS" 
(
P_ID IN PURCHASEORDERDETAILS.ID%TYPE
)
AS 
BEGIN
  DELETE FROM PURCHASEORDERDETAILS WHERE ID = P_ID;
  COMMIT;
END SP_DELETE_PURCHASEORDERDETAILS;

/
--------------------------------------------------------
--  DDL for Procedure SP_DELETE_PURCHASEORDERSTATUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_DELETE_PURCHASEORDERSTATUS" 
(
P_ID IN PURCHASEORDERSTATUS.ID%TYPE
)
AS 
BEGIN
DELETE FROM PURCHASEORDERSTATUS WHERE ID = P_ID;
COMMIT;
END SP_DELETE_PURCHASEORDERSTATUS;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_CUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_CUSTOMER" 
(
 RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR
SELECT * FROM CUSTOMER;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_DISEASE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_DISEASE" 
(
RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR
SELECT * FROM DISEASE;
END SP_GETALL_DISEASE;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_DISEASEOFTHEINSUREDMAPPING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_DISEASEOFTHEINSUREDMAPPING" 
(
 RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR 
SELECT * FROM DISEASEOFTHEINSUREDMAPPING;
END SP_GETALL_DISEASEOFTHEINSUREDMAPPING;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_EMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_EMPLOYEE" 
(
RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR
SELECT * FROM EMPLOYEE;
END SP_GETALL_EMPLOYEE;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_EMPLOYEETYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_EMPLOYEETYPE" 
(
RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR 
SELECT * FROM EMPLOYEETYPE;
END SP_GETALL_EMPLOYEETYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_INSTALLMENTAMOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_INSTALLMENTAMOUNT" 
(
RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR
SELECT * FROM INSTALLMENTAMOUNT;
END SP_GETALL_INSTALLMENTAMOUNT;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_INSUREDREGISTRATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_INSUREDREGISTRATION" 
(
RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR
SELECT * FROM INSUREDREGISTRATION ;
END SP_GETALL_INSUREDREGISTRATION;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_PAYMENTTYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_PAYMENTTYPE" 
(
 RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR 
SELECT * FROM PAYMENTTYPE;
END SP_GETALL_PAYMENTTYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_POLICY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_POLICY" 
(
 RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR 
SELECT * FROM POLICY;
END SP_GETALL_POLICY;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_POLICYTYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_POLICYTYPE" 
(
RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR
SELECT * FROM POLICYTYPE;
END SP_GETALL_POLICYTYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_POLICYTYPEDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_POLICYTYPEDETAILS" 
(
RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR
SELECT * FROM POLICYTYPEDETAILS;
END SP_GETALL_POLICYTYPEDETAILS;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_PROXIMITYDEGREE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_PROXIMITYDEGREE" 
(
RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR 
SELECT * FROM PROXIMITYDEGREE;
END SP_GETALL_PROXIMITYDEGREE;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_PURCHASEORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_PURCHASEORDER" 
(
RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR
SELECT * FROM PURCHASEORDER;
END SP_GETALL_PURCHASEORDER;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_PURCHASEORDERDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_PURCHASEORDERDETAILS" 
(
RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR
SELECT * FROM PURCHASEORDERDETAILS;
END SP_GETALL_PURCHASEORDERDETAILS;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETALL_PURCHASEORDERSTATUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETALL_PURCHASEORDERSTATUS" 
(
RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR 
SELECT * FROM PURCHASEORDERSTATUS;
END SP_GETALL_PURCHASEORDERSTATUS;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_CUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_CUSTOMER" 
(
  P_ID IN CUSTOMER.ID%TYPE, 
  RESULTS OUT SYS_REFCURSOR
) AS 
BEGIN
OPEN RESULTS FOR 
  SELECT * FROM CUSTOMER WHERE ID = P_ID;
END SP_GETBYID_CUSTOMER;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_DISEASE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_DISEASE" 
(
  P_ID IN DISEASE.ID%TYPE, 
  RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR 
  SELECT * FROM DISEASE WHERE ID = P_ID;
END SP_GETBYID_DISEASE;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_DISEASEOFTHEINSUREDMAPPING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_DISEASEOFTHEINSUREDMAPPING" 
(
 P_ID IN DISEASEOFTHEINSUREDMAPPING.ID%TYPE,
 RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR 
SELECT * FROM DISEASEOFTHEINSUREDMAPPING WHERE ID = P_ID;
END SP_GETBYID_DISEASEOFTHEINSUREDMAPPING;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_EMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_EMPLOYEE" 
(
  P_ID IN EMPLOYEE.ID%TYPE, 
  RESULTS OUT SYS_REFCURSOR
) AS 
BEGIN
OPEN RESULTS FOR 
  SELECT * FROM EMPLOYEE WHERE ID = P_ID;
END SP_GETBYID_EMPLOYEE;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_EMPLOYEETYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_EMPLOYEETYPE" 
(
  P_ID IN EMPLOYEETYPE.ID%TYPE, 
  RESULTS OUT SYS_REFCURSOR
) AS 
BEGIN
OPEN RESULTS FOR 
  SELECT * FROM EMPLOYEETYPE WHERE ID = P_ID;
END SP_GETBYID_EMPLOYEETYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_INSTALLMENTAMOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_INSTALLMENTAMOUNT" 
(
  P_ID IN INSTALLMENTAMOUNT.ID%TYPE, 
  RESULTS OUT SYS_REFCURSOR
) AS 
BEGIN
OPEN RESULTS FOR 
  SELECT * FROM INSTALLMENTAMOUNT WHERE ID = P_ID;
END SP_GETBYID_INSTALLMENTAMOUNT;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_INSUREDREGISTRATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_INSUREDREGISTRATION" 
(
  P_ID IN INSUREDREGISTRATION.ID%TYPE, 
  RESULTS OUT SYS_REFCURSOR
) AS 
BEGIN
OPEN RESULTS FOR 
  SELECT * FROM INSUREDREGISTRATION WHERE ID = P_ID;
END SP_GETBYID_INSUREDREGISTRATION;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_PAYMENTTYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_PAYMENTTYPE" 
(
 P_ID IN PAYMENTTYPE.ID%TYPE,
 RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR 
SELECT * FROM PAYMENTTYPE WHERE ID = P_ID;
END SP_GETBYID_PAYMENTTYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_POLICY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_POLICY" 
(
  P_ID IN POLICY .ID%TYPE, 
  RESULTS OUT SYS_REFCURSOR
) AS 
BEGIN
OPEN RESULTS FOR 
  SELECT * FROM POLICY WHERE ID = P_ID;
END SP_GETBYID_POLICY;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_POLICYTYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_POLICYTYPE" 
(
  P_ID IN POLICYTYPE .ID%TYPE, 
  RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR 
  SELECT * FROM POLICYTYPE  WHERE ID = P_ID;
END SP_GETBYID_POLICYTYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_POLICYTYPEDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_POLICYTYPEDETAILS" 
(
  P_ID IN POLICYTYPEDETAILS .ID%TYPE, 
  RESULTS OUT SYS_REFCURSOR
) AS 
BEGIN
OPEN RESULTS FOR 
  SELECT * FROM POLICYTYPEDETAILS  WHERE ID = P_ID;
END SP_GETBYID_POLICYTYPEDETAILS;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_PROXIMITYDEGREE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_PROXIMITYDEGREE" 
(
 P_ID IN PROXIMITYDEGREE .ID%TYPE,
 RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR 
SELECT * FROM PROXIMITYDEGREE  WHERE ID = P_ID;
END SP_GETBYID_PROXIMITYDEGREE;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_PURCHASEORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_PURCHASEORDER" 
(
 P_ID IN PURCHASEORDER .ID%TYPE,
 RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR 
SELECT * FROM PURCHASEORDER  WHERE ID = P_ID;
END SP_GETBYID_PURCHASEORDER;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_PURCHASEORDERDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_PURCHASEORDERDETAILS" 
(
  P_ID IN PURCHASEORDERDETAILS.ID%TYPE, 
  RESULTS OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN RESULTS FOR 
  SELECT * FROM PURCHASEORDERDETAILS WHERE ID = P_ID;
END SP_GETBYID_PURCHASEORDERDETAILS;

/
--------------------------------------------------------
--  DDL for Procedure SP_GETBYID_PURCHASEORDERSTATUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_GETBYID_PURCHASEORDERSTATUS" 
(
  P_ID IN PURCHASEORDERSTATUS .ID%TYPE, 
  RESULTS OUT SYS_REFCURSOR
) AS 
BEGIN
OPEN RESULTS FOR 
  SELECT * FROM PURCHASEORDERSTATUS  WHERE ID = P_ID;
END SP_GETBYID_PURCHASEORDERSTATUS;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_CUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_CUSTOMER" 
(
    P_ID                   IN CUSTOMER.ID%TYPE,
    P_NAME                 IN CUSTOMER.NAME%TYPE,
    P_SURNAME              IN CUSTOMER.SURNAME%TYPE,
    P_USERNAME             IN CUSTOMER.USERNAME%TYPE,
    P_PASSWORD             IN CUSTOMER.PASSWORD%TYPE,
    P_NATIONALITY          IN CUSTOMER.NATIONALITY%TYPE,
    P_IDENTIFICATIONNUMBER IN CUSTOMER.IDENTIFICATIONNUMBER%TYPE,
    P_BIRTHDATE            IN CUSTOMER.BIRTHDATE%TYPE,
    P_GENDER               IN CUSTOMER.GENDER%TYPE,
    P_EMAIL                IN CUSTOMER.EMAIL%TYPE,
    P_PHONE                IN CUSTOMER.PHONE%TYPE,
    P_ADRESS               IN CUSTOMER.ADRESS%TYPE,
    P_CREATEDATE           IN CUSTOMER.CREATEDATE%TYPE,
    P_UPDATEDATE           IN CUSTOMER.UPDATEDATE%TYPE,
    P_CREATEBY             IN CUSTOMER.CREATEBY%TYPE,
    P_UPDATEBY             IN CUSTOMER.UPDATEBY%TYPE


)
AS 
BEGIN
  UPDATE CUSTOMER SET NAME=P_NAME,SURNAME=P_SURNAME,USERNAME=P_USERNAME,PASSWORD=P_PASSWORD,NATIONALITY=P_NATIONALITY,IDENTIFICATIONNUMBER=P_IDENTIFICATIONNUMBER,BIRTHDATE=P_BIRTHDATE,GENDER=P_GENDER,EMAIL=P_EMAIL,PHONE=P_PHONE,ADRESS=P_ADRESS,CREATEDATE=P_CREATEDATE,UPDATEDATE=P_UPDATEDATE,CREATEBY=P_CREATEBY,UPDATEBY=P_UPDATEBY
WHERE ID = P_ID;
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_DISEASE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_DISEASE" 
(
   P_ID IN DISEASE.ID%TYPE,
   P_NAME IN DISEASE.NAME%TYPE,
   P_RAISE IN DISEASE.RAISE%TYPE,
   P_CREATEBY IN DISEASE.CREATEBY%TYPE,
   P_CREATEDATE IN DISEASE.CREATEDATE%TYPE,
   P_UPDATEBY IN DISEASE.UPDATEBY%TYPE,
   P_UPDATEDATE IN DISEASE.UPDATEDATE%TYPE
)
AS 
BEGIN
 UPDATE DISEASE SET NAME=P_NAME,RAISE=P_RAISE,CREATEBY=P_CREATEBY,CREATEDATE=P_CREATEDATE,UPDATEBY=P_UPDATEBY,UPDATEDATE=P_UPDATEDATE
 WHERE ID = P_ID;
 COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_DISEASEOFTHEINSUREDMAPPING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_DISEASEOFTHEINSUREDMAPPING" 
(
P_ID IN DISEASEOFTHEINSUREDMAPPING.ID%TYPE,
P_INSUREDREGISTRATIONID IN DISEASEOFTHEINSUREDMAPPING.INSUREDREGISTRATIONID%TYPE,
P_DISEASEID IN DISEASEOFTHEINSUREDMAPPING.DISEASEID%TYPE,
P_CREATEBY IN DISEASEOFTHEINSUREDMAPPING.CREATEBY%TYPE,
P_CREATEDATE IN DISEASEOFTHEINSUREDMAPPING.CREATEDATE%TYPE,
P_UPDATEBY IN DISEASEOFTHEINSUREDMAPPING.UPDATEBY%TYPE,
P_UPDATEDATE IN DISEASEOFTHEINSUREDMAPPING.UPDATEDATE%TYPE
)
AS 
BEGIN
  UPDATE DISEASEOFTHEINSUREDMAPPING SET INSUREDREGISTRATIONID = P_INSUREDREGISTRATIONID, DISEASEID = P_DISEASEID,CREATEBY=P_CREATEBY, CREATEDATE=P_CREATEDATE, UPDATEBY=P_UPDATEBY, UPDATEDATE=P_UPDATEDATE
WHERE ID = P_ID;
COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_EMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_EMPLOYEE" 
(
P_ID IN EMPLOYEE.ID%TYPE,
P_EMPLOYEETYPEID IN EMPLOYEE.EMPLOYEETYPEID%TYPE,
P_EMPLOYEEMANAGERID IN EMPLOYEE.EMPLOYEEMANAGERID%TYPE,
P_NAME IN EMPLOYEE.NAME%TYPE,
P_SURNAME IN EMPLOYEE.SURNAME%TYPE,
P_USERNAME IN EMPLOYEE.USERNAME%TYPE,
P_PASSWORD IN EMPLOYEE.PASSWORD%TYPE,
P_PHONE IN EMPLOYEE.PHONE%TYPE,
P_ADRESS IN EMPLOYEE.ADRESS%TYPE,
P_EMAIL IN EMPLOYEE.EMAIL%TYPE,
P_TITLE IN EMPLOYEE.TITLE%TYPE,
P_CREATEBY IN EMPLOYEE.CREATEBY%TYPE,
P_CREATEDATE IN EMPLOYEE.CREATEDATE%TYPE,
P_UPDATEBY IN EMPLOYEE.UPDATEBY%TYPE,
P_UPDATEDATE IN EMPLOYEE.UPDATEDATE%TYPE
)
AS 
BEGIN
  UPDATE EMPLOYEE SET  EMPLOYEETYPEID=P_EMPLOYEETYPEID,EMPLOYEEMANAGERID=P_EMPLOYEEMANAGERID,NAME=P_NAME,SURNAME=P_SURNAME,USERNAME=P_USERNAME,PASSWORD=P_PASSWORD,PHONE=P_PHONE,ADRESS=P_ADRESS,EMAIL=P_EMAIL,TITLE=P_TITLE,CREATEBY=P_CREATEBY,CREATEDATE=P_CREATEDATE,UPDATEBY=P_UPDATEBY,UPDATEDATE=P_UPDATEDATE
  WHERE ID = P_ID;
  COMMIT;
END SP_UPDATE_EMPLOYEE;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_EMPLOYEETYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_EMPLOYEETYPE" 
(
P_ID IN EMPLOYEETYPE.ID%TYPE,
P_NAME IN EMPLOYEETYPE.NAME%TYPE,
P_CREATEBY IN EMPLOYEETYPE.CREATEBY%TYPE,
P_CREATEDATE IN EMPLOYEETYPE.CREATEDATE%TYPE,
P_UPDATEBY IN EMPLOYEETYPE.UPDATEBY%TYPE,
P_UPDATEDATE IN EMPLOYEETYPE.UPDATEDATE%TYPE
)
AS 
BEGIN
  UPDATE EMPLOYEE SET NAME=P_NAME,CREATEBY=P_CREATEBY,CREATEDATE=P_CREATEDATE,UPDATEBY=P_UPDATEBY,UPDATEDATE=P_UPDATEDATE
  WHERE ID = P_ID;
  COMMIT;
END SP_UPDATE_EMPLOYEETYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_INSTALLMENTAMOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_INSTALLMENTAMOUNT" 
(
P_ID IN INSTALLMENTAMOUNT.ID%TYPE,
P_AMOUNT IN INSTALLMENTAMOUNT.AMOUNT%TYPE,
P_RAISE IN INSTALLMENTAMOUNT.RAISE%TYPE,
P_CREATEBY IN INSTALLMENTAMOUNT.CREATEBY%TYPE,
P_CREATEDATE IN INSTALLMENTAMOUNT.CREATEDATE%TYPE,
P_UPDATEBY IN INSTALLMENTAMOUNT.UPDATEBY%TYPE,
P_UPDATEDATE IN INSTALLMENTAMOUNT.UPDATEDATE%TYPE
)
AS 
BEGIN
  UPDATE INSTALLMENTAMOUNT SET AMOUNT=P_AMOUNT,RAISE=P_RAISE,CREATEBY=P_CREATEBY,CREATEDATE=P_CREATEDATE,UPDATEBY=P_UPDATEBY,UPDATEDATE=P_UPDATEDATE
  WHERE ID = P_ID;
  COMMIT;
END SP_UPDATE_INSTALLMENTAMOUNT;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_INSUREDREGISTRATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_INSUREDREGISTRATION" 
(
P_CUSTOMERID IN INSUREDREGISTRATION.CUSTOMERID%TYPE,
P_PROXIMITYID IN INSUREDREGISTRATION.PROXIMITYID%TYPE,
P_NAME IN INSUREDREGISTRATION.NAME%TYPE,
P_SURNAME IN INSUREDREGISTRATION.SURNAME%TYPE,
P_NATIONALITY IN INSUREDREGISTRATION.NATIONALITY%TYPE,
P_IDENTIFICATIONNUMBER IN INSUREDREGISTRATION.IDENTIFICATIONNUMBER%TYPE,
P_BIRTHDATE IN INSUREDREGISTRATION.BIRTHDATE%TYPE,
P_GENDER IN INSUREDREGISTRATION.GENDER%TYPE,
P_EMAIL IN INSUREDREGISTRATION.EMAIL%TYPE,
P_ADRESS IN INSUREDREGISTRATION.ADRESS%TYPE,
P_PHONE IN INSUREDREGISTRATION.PHONE%TYPE,
P_CREATEBY IN INSUREDREGISTRATION.CREATEBY%TYPE,
P_CREATEDATE IN INSUREDREGISTRATION.CREATEDATE%TYPE,
P_UPDATEBY IN INSUREDREGISTRATION.UPDATEBY%TYPE,
P_UPDATEDATE IN INSUREDREGISTRATION.UPDATEDATE%TYPE
)
AS 
BEGIN
UPDATE INSUREDREGISTRATION SET CUSTOMERID=P_CUSTOMERID,PROXIMITYID=P_PROXIMITYID,NAME=P_NAME,SURNAME=P_SURNAME,NATIONALITY=P_NATIONALITY,IDENTIFICATIONNUMBER=P_IDENTIFICATIONNUMBER,BIRTHDATE=P_BIRTHDATE,GENDER=P_GENDER,EMAIL=P_EMAIL,ADRESS=P_ADRESS,PHONE=P_PHONE,CREATEBY=P_CREATEBY,CREATEDATE=P_UPDATEDATE,UPDATEBY=P_UPDATEBY,UPDATEDATE=P_UPDATEDATE;
COMMIT;
END SP_UPDATE_INSUREDREGISTRATION;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_PAYMENTTYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_PAYMENTTYPE" 
(
P_ID IN PAYMENTTYPE.ID%TYPE,
P_NAME IN PAYMENTTYPE.NAME%TYPE,
P_DESCRIPTION IN PAYMENTTYPE.DESCRIPTION%TYPE,
P_DISCOUNT IN PAYMENTTYPE.DISCOUNT%TYPE,
P_CREATEBY IN PAYMENTTYPE.CREATEBY%TYPE,
P_CREATEDATE IN PAYMENTTYPE.CREATEDATE%TYPE,
P_UPDATEBY IN PAYMENTTYPE.UPDATEBY%TYPE,
P_UPDATEDATE IN PAYMENTTYPE.UPDATEDATE%TYPE
)
AS 
BEGIN
  UPDATE PAYMENTTYPE SET  NAME=P_NAME,DESCRIPTION=P_DESCRIPTION,DISCOUNT=P_DISCOUNT,CREATEBY=P_CREATEBY,CREATEDATE=P_CREATEDATE,UPDATEBY=P_UPDATEBY,UPDATEDATE=P_UPDATEDATE
  WHERE ID = P_ID;
  COMMIT;
END SP_UPDATE_PAYMENTTYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_POLICY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_POLICY" 
(
P_ID IN POLICY.ID%TYPE,
P_NAME IN POLICY.NAME%TYPE,
P_DESCRIPTION IN POLICY.DESCRIPTION%TYPE,
P_CREATEBY IN POLICY.CREATEBY%TYPE,
P_CREATEDATE IN POLICY.CREATEDATE%TYPE, 
P_UPDATEBY IN POLICY.UPDATEBY%TYPE,
P_UPDATEDATE IN POLICY.UPDATEDATE%TYPE
)
AS 
BEGIN
 UPDATE POLICY SET  NAME=P_NAME,DESCRIPTION=P_DESCRIPTION,CREATEBY=P_CREATEBY,CREATEDATE=P_CREATEDATE,UPDATEBY=P_UPDATEBY,UPDATEDATE=P_UPDATEDATE
 WHERE ID = P_ID;
 COMMIT;
END SP_UPDATE_POLICY;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_POLICYTYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_POLICYTYPE" 
(
P_ID IN POLICYTYPE.ID%TYPE,
P_POLICYID IN POLICYTYPE.POLICYID%TYPE,
P_NAME IN POLICYTYPE.NAME%TYPE,
P_DESCRIPTION IN POLICYTYPE.DESCRIPTION%TYPE,
P_CREATEBY IN POLICYTYPE.CREATEBY%TYPE,
P_CREATEDATE IN POLICYTYPE.CREATEDATE%TYPE,
P_UPDATEBY IN POLICYTYPE.UPDATEBY%TYPE,
P_UPDATEDATE IN POLICYTYPE.UPDATEDATE%TYPE
)
AS 
BEGIN
 UPDATE POLICYTYPE SET POLICYID=P_POLICYID,NAME=P_NAME,DESCRIPTION=P_DESCRIPTION,CREATEBY=P_CREATEBY,CREATEDATE=P_CREATEDATE,UPDATEBY=P_UPDATEBY,UPDATEDATE=P_UPDATEDATE
 WHERE ID = P_ID;
 COMMIT;
END SP_UPDATE_POLICYTYPE;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_POLICYTYPEDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_POLICYTYPEDETAILS" 
(
P_ID IN POLICYTYPEDETAILS.ID%TYPE,
P_POLICYTYPEID IN POLICYTYPEDETAILS.POLICYTYPEID%TYPE,
P_NAME IN POLICYTYPEDETAILS.NAME%TYPE,
P_DESCRIPTION IN POLICYTYPEDETAILS.DESCRIPTION%TYPE,
P_PRICE IN POLICYTYPEDETAILS.PRICE%TYPE,
P_CREATEBY IN POLICYTYPEDETAILS.CREATEBY%TYPE,
P_CREATEDATE IN POLICYTYPEDETAILS.CREATEDATE%TYPE,
P_UPDATEBY IN POLICYTYPEDETAILS.UPDATEBY%TYPE,
P_UPDATEDATE IN POLICYTYPEDETAILS.UPDATEDATE%TYPE
)
AS
BEGIN
UPDATE POLICYTYPEDETAILS SET  POLICYTYPEID=P_POLICYTYPEID,NAME=P_NAME,DESCRIPTION=P_DESCRIPTION,PRICE=P_PRICE,CREATEBY=P_CREATEBY,CREATEDATE=P_CREATEDATE,UPDATEBY=P_UPDATEBY,UPDATEDATE=P_UPDATEDATE
WHERE ID = P_ID;
COMMIT;
END SP_UPDATE_POLICYTYPEDETAILS;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_PROXIMITYDEGREE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_PROXIMITYDEGREE" 
(
P_ID IN PROXIMITYDEGREE.ID%TYPE,
P_PROXIMITYNAME IN PROXIMITYDEGREE.PROXIMITYNAME%TYPE,
P_CREATEBY IN PROXIMITYDEGREE.CREATEBY%TYPE,
P_CREATEDATE IN PROXIMITYDEGREE.CREATEDATE%TYPE,
P_UPDATEBY IN PROXIMITYDEGREE.UPDATEBY%TYPE,
P_UPDATEDATE IN PROXIMITYDEGREE.UPDATEDATE%TYPE
)
AS 
BEGIN
 UPDATE PROXIMITYDEGREE SET  PROXIMITYNAME=P_PROXIMITYNAME,CREATEBY=P_CREATEBY,CREATEDATE=P_CREATEDATE,UPDATEBY=P_UPDATEBY,UPDATEDATE=P_UPDATEDATE
 WHERE ID = P_ID;
 COMMIT;
END SP_UPDATE_PROXIMITYDEGREE;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_PURCHASEORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_PURCHASEORDER" 
(
P_ID IN PURCHASEORDER.ID%TYPE,
P_CUSTOMERID IN PURCHASEORDER.CUSTOMERID%TYPE,
P_PAYMENTTYPEID IN PURCHASEORDER.PAYMENTTYPEID%TYPE,
P_INSTALLMENTAMOUNTID IN PURCHASEORDER.INSTALLMENTAMOUNTID%TYPE,
P_TOTALPRICE IN PURCHASEORDER.TOTALPRICE%TYPE,
P_DESCRIPTION IN PURCHASEORDER.DESCRIPTION%TYPE,
P_APPROVEREMPLOYEEID IN PURCHASEORDER.APPROVEREMPLOYEEID%TYPE,
P_PURCHASEORDERSTATUSID IN PURCHASEORDER.PURCHASEORDERSTATUSID%TYPE,
P_EXPIRATIONDATE IN PURCHASEORDER.EXPIRATIONDATE%TYPE,
P_CREATEBY IN PURCHASEORDER.CREATEBY%TYPE,
P_CREATEDATE IN PURCHASEORDER.CREATEDATE%TYPE,
P_UPDATEBY IN PURCHASEORDER.UPDATEBY%TYPE,
P_UPDATEDATE IN PURCHASEORDER.UPDATEDATE%TYPE
)
AS 
BEGIN
 UPDATE PURCHASEORDER SET CUSTOMERID=P_CUSTOMERID,PAYMENTTYPEID=P_PAYMENTTYPEID,INSTALLMENTAMOUNTID=P_INSTALLMENTAMOUNTID,TOTALPRICE=P_TOTALPRICE,DESCRIPTION=P_DESCRIPTION,APPROVEREMPLOYEEID=P_APPROVEREMPLOYEEID,PURCHASEORDERSTATUSID=P_PURCHASEORDERSTATUSID,EXPIRATIONDATE=P_EXPIRATIONDATE,CREATEBY=P_CREATEBY,CREATEDATE=P_CREATEDATE,UPDATEBY=P_UPDATEBY,UPDATEDATE=P_UPDATEDATE
 WHERE ID = P_ID;
COMMIT;
END SP_UPDATE_PURCHASEORDER;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_PURCHASEORDERDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_PURCHASEORDERDETAILS" 
(
P_ID IN PURCHASEORDERDETAILS.ID%TYPE,
P_PURCHASEORDERID IN PURCHASEORDERDETAILS.PURCHASEORDERID%TYPE,
P_INSUREDREGISTRATIONID IN PURCHASEORDERDETAILS.INSUREDREGISTRATIONID%TYPE,
P_PRICE IN PURCHASEORDERDETAILS.PRICE%TYPE,
P_DESCRIPTION IN PURCHASEORDERDETAILS.DESCRIPTION%TYPE,
P_CREATEBY IN PURCHASEORDERDETAILS.CREATEBY%TYPE,
P_CREATEDATE IN PURCHASEORDERDETAILS.CREATEDATE%TYPE,
P_UPDATEBY IN PURCHASEORDERDETAILS.UPDATEBY%TYPE,
P_UPDATEDATE IN PURCHASEORDERDETAILS.UPDATEDATE%TYPE,
P_POLICYID IN PURCHASEORDERDETAILS.POLICYID%TYPE,
P_POLICYTYPEID IN PURCHASEORDERDETAILS.POLICYTYPEID%TYPE,
P_POLICYTYPEDETAILSID IN PURCHASEORDERDETAILS.POLICYTYPEDETAILSID%TYPE
)
AS 
BEGIN
  UPDATE PURCHASEORDERDETAILS SET  PURCHASEORDERID=P_PURCHASEORDERID,INSUREDREGISTRATIONID=P_INSUREDREGISTRATIONID,PRICE=P_PRICE,DESCRIPTION=P_DESCRIPTION,CREATEBY=P_CREATEBY,CREATEDATE=P_CREATEDATE,UPDATEBY=P_UPDATEBY,UPDATEDATE=P_UPDATEDATE,POLICYID=P_POLICYID,POLICYTYPEID=P_POLICYTYPEID,POLICYTYPEDETAILSID=P_POLICYTYPEDETAILSID
  WHERE ID = P_ID;
  COMMIT;
END SP_UPDATE_PURCHASEORDERDETAILS;

/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_PURCHASEORDERSTATUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "INSURANCEDB"."SP_UPDATE_PURCHASEORDERSTATUS" 
(
P_ID IN PURCHASEORDERSTATUS.ID%TYPE,
P_NAME IN PURCHASEORDERSTATUS.NAME%TYPE,
P_CREATEBY IN PURCHASEORDERSTATUS.NAME%TYPE,
P_CREATEDATE IN PURCHASEORDERSTATUS.NAME%TYPE,
P_UPDATEBY IN PURCHASEORDERSTATUS.NAME%TYPE,
P_UPDATEDATE IN PURCHASEORDERSTATUS.NAME%TYPE
)
AS 
BEGIN
  UPDATE PURCHASEORDERSTATUS SET NAME=P_NAME,CREATEBY=P_CREATEBY,CREATEDATE=P_CREATEDATE,UPDATEBY=P_UPDATEBY,UPDATEDATE=P_UPDATEDATE
  WHERE ID = P_ID;
  COMMIT;
END SP_UPDATE_PURCHASEORDERSTATUS;

/
--------------------------------------------------------
--  Constraints for Table EMPLOYEE
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."EMPLOYEE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."EMPLOYEE" ADD CONSTRAINT "EMPLOYEE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table INSTALLMENTAMOUNT
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."INSTALLMENTAMOUNT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."INSTALLMENTAMOUNT" ADD CONSTRAINT "INSTALMENTAMOUNT _PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table INSUREDREGISTRATION
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."INSUREDREGISTRATION" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."INSUREDREGISTRATION" MODIFY ("CUSTOMERID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."INSUREDREGISTRATION" ADD CONSTRAINT "INSUREDREGISTRATION_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DISEASE
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."DISEASE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."DISEASE" ADD CONSTRAINT "DISAESES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PAYMENTTYPE
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."PAYMENTTYPE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."PAYMENTTYPE" ADD CONSTRAINT "PAYMENTTYPE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DISEASEOFTHEINSUREDMAPPING
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."DISEASEOFTHEINSUREDMAPPING" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."DISEASEOFTHEINSUREDMAPPING" ADD CONSTRAINT "DISEASESOFTHEINSUREDMAPPING_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PROXIMITYDEGREE
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."PROXIMITYDEGREE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."PROXIMITYDEGREE" ADD CONSTRAINT "PROXIMITYDEGREE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table POLICYTYPE
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."POLICYTYPE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."POLICYTYPE" MODIFY ("POLICYID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."POLICYTYPE" ADD CONSTRAINT "POLICYTYPE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table POLICYTYPEDETAILS
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."POLICYTYPEDETAILS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."POLICYTYPEDETAILS" MODIFY ("POLICYTYPEID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."POLICYTYPEDETAILS" ADD CONSTRAINT "POLICYTYPEDETAILS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PURCHASEORDERSTATUS
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."PURCHASEORDERSTATUS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."PURCHASEORDERSTATUS" ADD CONSTRAINT "PURCHASEORDERSTATUS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PURCHASEORDERDETAILS
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."PURCHASEORDERDETAILS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."PURCHASEORDERDETAILS" ADD CONSTRAINT "PURCHASEORDERDETAIL_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PURCHASEORDER
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."PURCHASEORDER" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."PURCHASEORDER" ADD CONSTRAINT "PURCHASEORDER_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table POLICY
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."POLICY" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."POLICY" ADD CONSTRAINT "POLICY_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table EMPLOYEETYPE
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."EMPLOYEETYPE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."EMPLOYEETYPE" ADD CONSTRAINT "EMPLOYEETYPE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CUSTOMER
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."CUSTOMER" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "INSURANCEDB"."CUSTOMER" ADD CONSTRAINT "CUSTOMER_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DISEASEOFTHEINSUREDMAPPING
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."DISEASEOFTHEINSUREDMAPPING" ADD CONSTRAINT "DISEASESOFTHEINSUREDMAPPING_DISAESES_ID_FK" FOREIGN KEY ("DISEASEID")
	  REFERENCES "INSURANCEDB"."DISEASE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "INSURANCEDB"."DISEASEOFTHEINSUREDMAPPING" ADD CONSTRAINT "DISEASESOFTHEINSUREDMAPPING_INSUREDREGISTRATION_ID_FK" FOREIGN KEY ("INSUREDREGISTRATIONID")
	  REFERENCES "INSURANCEDB"."INSUREDREGISTRATION" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EMPLOYEE
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."EMPLOYEE" ADD CONSTRAINT "EMPLOYEE_EMPLOYEETYPE_ID_FK" FOREIGN KEY ("EMPLOYEETYPEID")
	  REFERENCES "INSURANCEDB"."EMPLOYEETYPE" ("ID") ON DELETE SET NULL ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table INSUREDREGISTRATION
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."INSUREDREGISTRATION" ADD CONSTRAINT "INSUREDREGISTRATION_PROXIMITYDEGREE_ID_FK" FOREIGN KEY ("PROXIMITYID")
	  REFERENCES "INSURANCEDB"."PROXIMITYDEGREE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table POLICYTYPE
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."POLICYTYPE" ADD CONSTRAINT "POLICYTYPE_POLICY_ID_FK" FOREIGN KEY ("POLICYID")
	  REFERENCES "INSURANCEDB"."POLICY" ("ID") ON DELETE SET NULL ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PURCHASEORDER
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."PURCHASEORDER" ADD CONSTRAINT "PURCHASEORDER_PAYMENTTYPE_ID_FK" FOREIGN KEY ("PAYMENTTYPEID")
	  REFERENCES "INSURANCEDB"."PAYMENTTYPE" ("ID") ON DELETE SET NULL ENABLE;
  ALTER TABLE "INSURANCEDB"."PURCHASEORDER" ADD CONSTRAINT "PURCHASEORDER_PURCHASEORDERSTATUS_ID_FK" FOREIGN KEY ("PURCHASEORDERSTATUSID")
	  REFERENCES "INSURANCEDB"."PURCHASEORDERSTATUS" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PURCHASEORDERDETAILS
--------------------------------------------------------

  ALTER TABLE "INSURANCEDB"."PURCHASEORDERDETAILS" ADD CONSTRAINT "PURCHASEORDERDETAIL_INSUREDREGISTRATION_ID_FK" FOREIGN KEY ("INSUREDREGISTRATIONID")
	  REFERENCES "INSURANCEDB"."INSUREDREGISTRATION" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "INSURANCEDB"."PURCHASEORDERDETAILS" ADD CONSTRAINT "PURCHASEORDERDETAIL_PURCHASEORDER_ID_FK" FOREIGN KEY ("PURCHASEORDERID")
	  REFERENCES "INSURANCEDB"."PURCHASEORDER" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "INSURANCEDB"."PURCHASEORDERDETAILS" ADD CONSTRAINT "PURCHASEORDERDETAILS_POLICY_ID_FK" FOREIGN KEY ("POLICYID")
	  REFERENCES "INSURANCEDB"."POLICY" ("ID") ENABLE;
  ALTER TABLE "INSURANCEDB"."PURCHASEORDERDETAILS" ADD CONSTRAINT "PURCHASEORDERDETAILS_POLICYTYPE_ID_FK" FOREIGN KEY ("POLICYTYPEID")
	  REFERENCES "INSURANCEDB"."POLICYTYPE" ("ID") ENABLE;
  ALTER TABLE "INSURANCEDB"."PURCHASEORDERDETAILS" ADD CONSTRAINT "PURCHASEORDERDETAILS_POLICYTYPEDETAILS_ID_FK" FOREIGN KEY ("POLICYTYPEDETAILSID")
	  REFERENCES "INSURANCEDB"."POLICYTYPEDETAILS" ("ID") ENABLE;
